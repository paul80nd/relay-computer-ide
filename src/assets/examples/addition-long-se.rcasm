; ***************************************************
;  Simple example of byte-by-byte long addition:
;
;    44 34 43 44 34 43 44 35 (sa)
;  + ac ef 6d c4 35 3f 38 92 (sb)
;  = f1 23 b1 08 69 82 7c c7
;
;  Note: values are stored little endian
;
;  Expected duration: 2m19s at default clock speed
; ***************************************************

        ; Load zero page locations (X = sb, Y = sa)
        ; Note we use the special '§' operator to pack two 8-bit
        ; values into the 16-bit M register in the form M1§M2
        ldi m,sb§sa     ; M1 = (sb), M2 = (sa)
        mov xy,m        ; X = M1, Y = M2

        ; Set end address of sb in D
        ldi b,8         ; length of sa (8 bytes)
        mov c,x         ; C = X = (sb)
        add d
        clr m1          ; clear M1 = zero page

        ; Registers are now in the following state
        ;  Y = sa zero page address
        ;  X = sb zero page address
        ;  D = zp address after addend
        ; M1 = zero page

        ; add two bytes together
loop:   mov m2,x        ; C <- addend byte (m1x)
        ldr c
        mov m2,y        ; B <- augend byte (m1y)
        ldr b
        add             ; A = B + C
        str a           ; A -> augend byte (m1x)
        bcs carry       ; If add caused carry ripple it through augend

        ; increment x and y pointers
cont:   ixy             ; Y++ (augend)
        mov b,x         ; X++ (addend)
        inc
        mov x,a

        ; compare with target
        mov c,d
        mov b,a
        cmp
        bne loop        ; loop if not done yet

        ; complete
done:   ldi m, sa       ; Point M to result
        hlt             ; and halt

carry:  ; For the carry scenario we need to add 1 to the byte. It's
        ; possible though that could cause a carry in that byte and
        ; so on so we iterate here until no carry.

        mov b,m2        ; increment m2 (to point at next byte in augend)
        inc
        mov m2,a

        ldr b           ; increment augend byte (m1y)
        inc
        str a

        bcs carry       ; Go again if caused carry
        jmp cont        ; Otherwise done and can continue


; Initial values in memory (bytes are little-endian ordered)
; Values are aligned to ease visability in memory viewer

        !align 16
sa:     !byte 0x35, 0x44, 0x43, 0x34, 0x44, 0x43, 0x34, 0x44
sb:     !byte 0x92, 0x38, 0x3f, 0x35, 0xc4, 0x6d, 0xef, 0xac
