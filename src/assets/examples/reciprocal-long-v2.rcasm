; *************************************************************
;  Revised example of byte-by-byte long reciprocal using the
;  non-restoring unsigned integer division method
;
;    01 / 05            (ra = 1/5 to 4 bytes)
;  = 33 33 33 33
;
;    01 / 0e            (rb = 1/14 to 6 bytes)
;  = 12 49 24 92 49 24
;
;    01 / 2d            (rc = 1/45 to 8 bytes)
;  = 05 b0 5b 05 b0 5b 05 b0
;
;    01 / 7d            (rd = 1/125 to 10 bytes)
;  = 02 0c 49 ba 5e 35 3f 7c ed 91
;
;  Changes over original version:
;    * unrolled inner bit-by-bit loop (saving 14m)
;    * dropped sentinel bit loop tracking (saving 2m)
;    * used restoring division algorithm (saving 15m)
;  Overall method is still very slow division approach but this
;  demonstrates the savings of loop unrolling in some cases.
;
;  Original expected duration: 1h19m26s at default clock speed
;  Revised expected duration:    46m37s at default clock speed
; *************************************************************

; Perform each reciprocal in turn by calling function
; Note we use the special '§' operator to pack two 8-bit
; values into the 16-bit M register in the form M1§M2

        ldi m,5§ra         ; sa = 1/5 (4 bytes)
        ldi b,4
        jsr long_rcp

        ldi m,14§rb        ; rb = 1/14 (6 bytes)
        ldi b,6
        jsr long_rcp

        ldi m,45§rc        ; rc = 1/45 (8 bytes)
        ldi b,8
        jsr long_rcp

        ldi m,125§rd       ; rd = 1/125 (10 bytes)
        ldi b,10
        jsr long_rcp

        hlt

; Reserve values in memory (bytes are little-endian ordered)
; Values are aligned and initialised to 1s-4s for da-dd
; respectively to ease visability in memory viewer

        !align 16
ra:     !fill 4, 0x11
        !fill 2, 0
rd:     !fill 10, 0x44
rb:     !fill 6, 0x22
        !fill 2,0
rc:     !fill 8, 0x33

; *****************************************************
;  Byte-by-byte Long Reciprocal: (M) = 1 / M1
;
;    M1: Divisor value (max 127)
;    M2: Location to store result (zero page)
;     B: Number of bytes to calculate result to
;
;  Resulting reciprocal is big-endian and consists of
;  only the fractional part (integral is assummed 0).
;  Operates on the zero page so M2 + B must be in ZP.
;
;  Mutates ABCD, M and XY
; *****************************************************
long_rcp: {

        ; Terms
        ;   A = remainder (register A - ongoing)
        ;   Q = quotient (register D - current byte)
        ;   V = divisor (register X)

        ; Because we'll be using XY as a general register we write the
        ; return address directly in to the jump instruction at rtn.
        ; That also means a bit of juggling to prepare our registers.
        mov c,x         ; Capture return address in CD
        mov d,y
        mov xy,m        ; Preserve M in XY
        ldi m,rtn+1     ; Set return address from CD
        str c
        ldi m,rtn+2
        str d
        mov m2,y        ; Set result location
        mov c,y         ; Set end address in Y (M2+B)
        add d
        mov y,d

        ; We now prepare for the first loop iteration. Result is built up byte-by-byte
        ; in the A loop and within that bit-by-bit in an unrolled B loop.
        mov b,x         ; Negate -V in X
        not d
        mov b,d
        inc d
        mov x,d
        ldi b,0         ; Place inital Q in D
        mov d,b
        ldi b,0         ; A=1 and set ALU flags
        inc a
        clr m1          ; M1=0 (zero page)

        ; Registers are now in the following state
        ;   A = 1 = remainder with 1 'shifted' in (A)
        ;   D = Initial quotient of 0 (Q)
        ;  M1 = 0 (zero page)
        ;  M2 = result location (zero page)
        ;  X = divisor value (-V)
        ;  Y = address after result (zero page)
        ; Now in state of 1 'shifted' into A and flags set

a_loop: ; A loop building reciprocal byte-by-byte

b_loop: ; Original B loop is unrolled here (duplicated 8 times) to
        ; build reciprocal bit-by-bit at expense of duplicated code

        ; Shift remainder and perform trial subtraction of V
        ; If negative then C=0 and restore else C=1 and keep
    _7: mov b,a         ; A << 1 (via x2)
        mov c,a
        add a
        mov b,a         ; A = A + -V
        mov c,x
        add
        bmi _7neg       ; Restore and set C to 0 if negative
        ldi b,1         ; Otherwise keep result and set C to 1
        mov c,b
        jmp _7set

        ; If A - V was negative we restore the remainder and clear C
 _7neg: mov a,b
        clr c

        ; We can now shift Q left and apply the 1 or 0 in register C
 _7set: mov b,d         ; (Q << 1) + C
        rol d
        mov b,d
        add d

        ; Following are now just the above repeated another times
        ; thereby 'unrolling the loop'

    _6: mov b,a
        mov c,a
        add a
        mov b,a
        mov c,x
        add
        bmi _6neg
        ldi b,1
        mov c,b
        jmp _6set
 _6neg: mov a,b
        clr c
 _6set: mov b,d
        rol d
        mov b,d
        add d

    _5: mov b,a
        mov c,a
        add a
        mov b,a
        mov c,x
        add
        bmi _5neg
        ldi b,1
        mov c,b
        jmp _5set
 _5neg: mov a,b
        clr c
 _5set: mov b,d
        rol d
        mov b,d
        add d

    _4: mov b,a
        mov c,a
        add a
        mov b,a
        mov c,x
        add
        bmi _4neg
        ldi b,1
        mov c,b
        jmp _4set
 _4neg: mov a,b
        clr c
 _4set: mov b,d
        rol d
        mov b,d
        add d

    _3: mov b,a
        mov c,a
        add a
        mov b,a
        mov c,x
        add
        bmi _3neg
        ldi b,1
        mov c,b
        jmp _3set
 _3neg: mov a,b
        clr c
 _3set: mov b,d
        rol d
        mov b,d
        add d

    _2: mov b,a
        mov c,a
        add a
        mov b,a
        mov c,x
        add
        bmi _2neg
        ldi b,1
        mov c,b
        jmp _2set
 _2neg: mov a,b
        clr c
 _2set: mov b,d
        rol d
        mov b,d
        add d

    _1: mov b,a
        mov c,a
        add a
        mov b,a
        mov c,x
        add
        bmi _1neg
        ldi b,1
        mov c,b
        jmp _1set
 _1neg: mov a,b
        clr c
 _1set: mov b,d
        rol d
        mov b,d
        add d

    _0: mov b,a
        mov c,a
        add a
        mov b,a
        mov c,x
        add
        bmi _0neg
        ldi b,1
        mov c,b
        jmp _0set
 _0neg: mov a,b
        clr c
 _0set: mov b,d
        rol d
        mov b,d
        add d

 b_end: ; D now contains our complete byte so we'll store it in memory.
        str d

        ; We can now bump M2 to point at the next location in memory and check if we've
        ; completed the reciprocal by checking the end address in Y. Note that the 'beq *'
        ; will be replaced by the actual return address at the beginning of this routine.
        ; We do this because we want to use register XY which would otherwise hold the address.
        mov b, m2       ; bump M2
        inc d
        mov m2,d
        mov b,d         ; Check if gone past last byte (M2=Y)
        mov c,y
        eor d
rtn:    beq *           ; Done if so

        ; We're now heading for the next byte of the overall result so we need to
        ; re-initialise. We reset Q and we update the sign flag based on the remainder A.
        ldi b,0         ; Set up next quotient (Q)
        mov d,b

        ; By this point our registers are in the following state:
        ;   A = remainder so far (A)
        ;   D = Initial quotient of zero (Q)
        ;  M1 = 0 (zero page)
        ;  M2 = next byte result location (zero page)
        ;  X = divisor value (-V)
        ;  Y = address after overall result (zero page)
        ; and Sign flag updated for remainder A
        ; i.e. we're good to loop
        jmp a_loop
}
